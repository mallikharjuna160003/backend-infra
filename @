
# Define the assume role policy for the Lambda function
data "aws_iam_policy_document" "lambda_assume_role_policy" {
  statement {
    actions = ["sts:AssumeRole"]
    
    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}


# Create the DocumentDB secret
resource "aws_secretsmanager_secret" "documentdb_secret" {
  name        = "my_documentdb_secret"
  description = "Credentials for DocumentDB"

  tags = {
    Name = "DocumentDB Secret"
  }
}

# Create the Lambda function for rotation
resource "aws_lambda_function" "rotation_lambda" {
  function_name = "documentdb_rotation_lambda"
  runtime       = "python3.8"  # Adjust as needed
  handler       = "index.lambda_handler"
  role          = aws_iam_role.lambda_role.arn
  s3_key        = "lambda_function.zip"  # Path to your Lambda deployment package
  timeout       = 30

  environment = {
    SECRET_ARN = aws_secretsmanager_secret.documentdb_secret.arn
  }
}

# Attach the IAM role to the Lambda function
resource "aws_iam_role" "lambda_role" {
  name               = "documentdb_rotation_lambda_role"
  assume_role_policy = data.aws_iam_policy_document.lambda_assume_role_policy.json
}

# IAM Policy for the Lambda to access Secrets Manager and DocumentDB
resource "aws_iam_policy" "lambda_policy" {
  name        = "documentdb_rotation_lambda_policy"
  description = "Policy for DocumentDB rotation Lambda function"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "secretsmanager:GetSecretValue",
          "secretsmanager:UpdateSecret",
          "secretsmanager:PutSecretValue",
          "secretsmanager:DeleteSecret"
        ]
        Resource = aws_secretsmanager_secret.documentdb_secret.arn
      },
      {
        Effect = "Allow"
        Action = [
          "rds:DescribeDBInstances",  # Adjust permissions as needed
          "rds:ModifyDBInstance"  # Adjust permissions as needed
        ]
        Resource = "*"
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "attach_lambda_policy" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = aws_iam_policy.lambda_policy.arn
}

# Enable automatic rotation for the secret
resource "aws_secretsmanager_secret_rotation" "documentdb_secret_rotation" {
  secret_arn              = aws_secretsmanager_secret.documentdb_secret.arn
  rotation_lambda_arn     = aws_lambda_function.rotation_lambda.arn
  rotation_rules {
    automatically_after_days = 30  # Adjust as needed
  }
}

