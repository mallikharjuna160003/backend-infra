# Create IAM Role for Lambda
resource "aws_iam_role" "lambda_role" {
  name               = "documentdb_rotation_lambda_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = "sts:AssumeRole"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
        Effect    = "Allow"
        Sid       = ""
      }
    ]
  })
}

# Attach Policy to Lambda Role
resource "aws_iam_policy_attachment" "lambda_policy_attachment" {
  name       = "documentdb_rotation_lambda_policy_attachment"
  roles      = [aws_iam_role.lambda_role.name]
  policies   = ["service-role/AWSLambdaBasicExecutionRole", "service-role/AWSSecretsManagerReadWrite"]
}

# Create Lambda Function for Credential Rotation
resource "aws_lambda_function" "rotation_lambda" {
  function_name = "documentdb-rotation-lambda"
  role          = aws_iam_role.lambda_role.arn
  handler       = "rotation_handler.lambda_handler"
  runtime       = "python3.8"

  # Path to your Lambda deployment package
  filename      = "lambda_function.zip"

  environment {
    SECRET_ARN = aws_secretsmanager_secret.documentdb_secret.arn
  }

  # Add a timeout for the Lambda function
  timeout = 30
}

# Create Secret in Secrets Manager
resource "aws_secretsmanager_secret" "documentdb_secret" {
  name        = "documentdb_credentials"
  description = "DocumentDB credentials"

  rotation_lambda_arn = aws_lambda_function.rotation_lambda.arn

  tags = {
    Name = "DocumentDB Credentials"
  }
}

# Enable automatic rotation for the secret
resource "aws_secretsmanager_secret_rotation" "documentdb_secret_rotation" {
  secret_id     = aws_secretsmanager_secret.documentdb_secret.id
  rotation_lambda_arn = aws_lambda_function.rotation_lambda.arn
  rotation_interval = "30d"  # Change the rotation interval as needed
}


output "secret_arn" {
  value = aws_secretsmanager_secret.documentdb_secret.arn
}

